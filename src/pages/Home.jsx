// src/pages/Home.jsx
import { useEffect, useRef, useState } from "react";
import { motion as Motion } from "motion/react";
import { Link } from "react-router-dom";


// Supported languages (code -> label)
const LANGS = [
  { code: "en", label: "English", sr: "en-IN" },
  { code: "hi", label: "рд╣рд┐рдиреНрджреА", sr: "hi-IN" },
  { code: "kn", label: "р▓Хр▓ир│Нр▓ир▓б (Kannada)", sr: "kn-IN" },
  { code: "ml", label: "р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)", sr: "ml-IN" },
  { code: "mr", label: "рдорд░рд╛рдареА (Marathi)", sr: "mr-IN" },
  { code: "ta", label: "родрооро┐ро┤рпН (Tamil)", sr: "ta-IN" },
  { code: "te", label: "р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)", sr: "te-IN" },
  { code: "bn", label: "ржмрж╛ржВрж▓рж╛ (Bengali)", sr: "bn-IN" },
];

// Simple demo translations for UI and canned replies
const T = {
  title: {
    en: "ЁЯдЦ AI Kisan Mitra",
    hi: "ЁЯдЦ рдПрдЖрдИ рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░",
    kn: "ЁЯдЦ AI р▓Хр│Гр▓╖р▓┐ р▓ор▓┐р▓др│Нр▓░",
    ml: "ЁЯдЦ р┤Ор┤Р р┤Хр┤┐р┤╕р┤╛р╡╗ р┤ор┤┐р┤др╡Нр┤░",
    mr: "ЁЯдЦ рдПрдЖрдп рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░",
    ta: "ЁЯдЦ роПроР роХро┐роЪро╛ройрпН рооро┐родрпНродро┐ро░ро╛",
    te: "ЁЯдЦ р░Пр░Р р░Хр░┐р░╕р░╛р░ир▒Н р░ор░┐р░др▒Нр░░",
    bn: "ЁЯдЦ ржПржЖржЗ ржХрж┐рж╖рж╛ржг ржорж┐рждрзНрж░",
  },
  needExpert: {
    en: "ЁЯдЭ Need Human Expert Help?",
    hi: "ЁЯдЭ рдорд╛рдирд╡ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдХреА рд╕рд╣рд╛рдпрддрд╛ рдЪрд╛рд╣рд┐рдП?",
    kn: "ЁЯдЭ р▓ор▓╛р▓ир▓╡ р▓др▓Ьр│Нр▓Юр▓░ р▓╕р▓╣р▓╛р▓п р▓мр│Зр▓Хр│Ж?",
    ml: "ЁЯдЭ р┤ор┤ир╡Бр┤╖р╡Нр┤п р┤╡р┤┐р┤жр┤Чр╡Нр┤зр┤ир╡Нр┤▒р╡Ж р┤╕р┤╣р┤╛р┤пр┤В р┤╡р╡Зр┤гр╡Л?",
    mr: "ЁЯдЭ рдорд╛рдирд╡реА рддрдЬреНрдЬреНрдЮрд╛рдЪреА рдорджрдд рд╣рд╡реА?",
    ta: "ЁЯдЭ роиро┐рокрпБрогро░ро┐ройрпН роЙродро╡ро┐ ро╡рпЗрогрпНроЯрпБрооро╛?",
    te: "ЁЯдЭ р░ор░╛р░ир░╡ р░ир░┐р░кр▒Бр░гр▒Бр░бр░┐ р░╕р░╣р░╛р░пр░В р░Хр░╛р░╡р░╛р░▓р░╛?",
    bn: "ЁЯдЭ ржорж╛ржиржм ржмрж┐рж╢рзЗрж╖ржЬрзНржЮрзЗрж░ рж╕рж╛рж╣рж╛ржпрзНржп ржЪрж╛ржЗ?",
  },
  placeholder: {
    en: "Type here...",
    hi: "рдпрд╣рд╛рдБ рд▓рд┐рдЦреЗрдВ...",
    kn: "р▓Зр▓▓р│Нр▓▓р▓┐ р▓мр▓░р│Жр▓пр▓┐р▓░р▓┐...",
    ml: "р┤Зр┤╡р┤┐р┤Яр╡Ж р┤Ор┤┤р╡Бр┤др╡В...",
    mr: "рдЗрдереЗ рд▓рд┐рд╣рд╛...",
    ta: "роЗроЩрпНроХрпЗ роОро┤рпБродро╡рпБроорпН...",
    te: "р░Зр░Хр▒Нр░Хр░б р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐...",
    bn: "ржПржЦрж╛ржирзЗ рж▓рж┐ржЦрзБржи...",
  },
  send: {
    en: "Send",
    hi: "рднреЗрдЬреЗрдВ",
    kn: "р▓Хр▓│р│Бр▓╣р▓┐р▓╕р▓┐",
    ml: "р┤Ер┤пр┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤Х",
    mr: "рдкрд╛рдард╡рд╛",
    ta: "роЕройрпБрокрпНрокрпБ",
    te: "р░кр░Вр░кр░Вр░бр░┐",
    bn: "ржкрж╛ржарж╛ржи",
  },
  start: {
    en: "Start",
    hi: "рд╢реБрд░реВ",
    kn: "р▓Жр▓░р▓Вр▓нр▓┐р▓╕р│Б",
    ml: "р┤др╡Бр┤Яр┤Щр╡Нр┤Щр╡Бр┤Х",
    mr: "рд╕реБрд░реВ",
    ta: "родрпКроЯроЩрпНроХрпБ",
    te: "р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐",
    bn: "рж╢рзБрж░рзБ",
  },
  stop: {
    en: "Stop",
    hi: "рд░реЛрдХреЗрдВ",
    kn: "р▓ир▓┐р▓▓р│Нр▓▓р▓┐р▓╕р▓┐",
    ml: "р┤ир┤┐р╡╝р┤др╡Нр┤др╡Бр┤Х",
    mr: "рдерд╛рдВрдмрд╡рд╛",
    ta: "роиро┐ро▒рпБродрпНродрпБ",
    te: "р░Жр░кр▒Б",
    bn: "ржерж╛ржорж╛ржи",
  },
  clear: {
    en: "Clear Chat",
    hi: "рдЪреИрдЯ рд╕рд╛рдлрд╝ рдХрд░реЗрдВ",
    kn: "р▓Ър▓╛р▓Яр│Н р▓Ер▓│р▓┐р▓╕р▓┐",
    ml: "р┤Ър┤╛р┤▒р╡Нр┤▒р╡Н р┤ор┤╛р┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤Х",
    mr: "рдЪреЕрдЯ рд╕рд╛рдл рдХрд░рд╛",
    ta: "роЕро░роЯрпНроЯрпИропрпИ роЕро┤ро┐",
    te: "р░Ър░╛р░Яр▒Н р░Хр▒Нр░▓р░┐р░пр░░р▒Н р░Ър▒Зр░пр░Вр░бр░┐",
    bn: "ржЪрзНржпрж╛ржЯ ржорзБржЫрзБржи",
  },
  upload: {
    en: "Upload",
    hi: "рдЕрдкрд▓реЛрдб",
    kn: "р▓Ер▓кр│НтАМр▓▓р│Лр▓бр│Н",
    ml: "р┤Ер┤кр╡НтАМр┤▓р╡Лр┤бр╡Н",
    mr: "рдЕрдкрд▓реЛрдб",
    ta: "рокродро┐ро╡рпЗро▒рпНро▒рпБ",
    te: "р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н",
    bn: "ржЖржкрж▓рзЛржб",
  },
  greeting: {
    en: "ЁЯСЛ Namaste Farmer! I am your AI Kisan Mitra. Ask me anything.",
    hi: "ЁЯСЛ рдирдорд╕реНрддреЗ рдХрд┐рд╕рд╛рди! рдореИрдВ рдЖрдкрдХрд╛ рдПрдЖрдИ рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░ рд╣реВрдБред рдЬреЛ рднреА рдкреВрдЫрдирд╛ рд╣реИ рдкреВрдЫреЗрдВред",
    kn: "ЁЯСЛ р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░ р▓░р│Ир▓др▓░р│Ж! р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор│Нр▓о AI р▓Хр│Гр▓╖р▓┐ р▓ор▓┐р▓др│Нр▓░. р▓Пр▓ир▓╛р▓жр▓░р│В р▓Хр│Зр▓│р▓┐.",
    ml: "ЁЯСЛ р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В р┤Хр╡╝р┤╖р┤Хр┤░р╡З! р┤Юр┤╛р╡╗ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ор┤Р р┤Хр┤┐р┤╕р┤╛р╡╗ р┤ор┤┐р┤др╡Нр┤░. р┤Ор┤ир╡Нр┤др╡Бр┤В р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр┤╛р┤В.",
    mr: "ЁЯСЛ рдирдорд╕реНрдХрд╛рд░ рд╢реЗрддрдХрд▒реНрдпрд╛рдВрдиреЛ! рдореА рддреБрдордЪрд╛ рдПрдЖрдп рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░. рдХрд╛рд╣реАрд╣реА рд╡рд┐рдЪрд╛рд░рд╛.",
    ta: "ЁЯСЛ ро╡рогроХрпНроХроорпН ро╡ро┐ро╡роЪро╛ропро┐роХро│рпЗ! роиро╛ройрпН роЙроЩрпНроХро│рпН роПроР роХро┐роЪро╛ройрпН рооро┐родрпНродро┐ро░ро╛. роОродрпИ ро╡рпЗрогрпНроЯрпБрооро╛ройро╛ро▓рпБроорпН роХрпЗро│рпБроЩрпНроХро│рпН.",
    te: "ЁЯСЛ р░ир░ор░╕р▒Нр░др▒З р░░р▒Ир░др▒Бр░▓р░╛р░░р░╛! р░ир▒Зр░ир▒Б р░ор▒А р░Пр░Р р░Хр░┐р░╕р░╛р░ир▒Н р░ор░┐р░др▒Нр░░. р░Пр░жр▒Ир░ир░╛ р░Ер░бр░Чр░Вр░бр░┐.",
    bn: "ЁЯСЛ ржиржорж╕рзНржХрж╛рж░ ржХрзГрж╖ржХржмржирзНржзрзБрж░рж╛! ржЖржорж┐ ржЖржкржирж╛рж░ ржПржЖржЗ ржХрж┐рж╖рж╛ржг ржорж┐рждрзНрж░ред ржпрж╛ ржЦрзБрж╢рж┐ ржЬрж┐ржЬрзНржЮрзЗрж╕ ржХрж░рзБржиред",
  },
  aiReplyGeneric: {
    en: "ЁЯМ▒ HereтАЩs a helpful tip based on your query.",
    hi: "ЁЯМ▒ рдЖрдкрдХреЗ рд╕рд╡рд╛рд▓ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдпрд╣ рдПрдХ рдЙрдкрдпреЛрдЧреА рд╕реБрдЭрд╛рд╡ рд╣реИред",
    kn: "ЁЯМ▒ р▓ир▓┐р▓ор│Нр▓о р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓п р▓Жр▓зр▓╛р▓░р▓ж р▓ор│Зр▓▓р│Ж р▓Йр▓кр▓пр│Бр▓Хр│Нр▓д р▓╕р▓▓р▓╣р│Ж р▓Зр▓▓р│Нр▓▓р▓┐р▓жр│Ж.",
    ml: "ЁЯМ▒ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Ър╡Лр┤жр╡Нр┤пр┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤Ер┤Яр┤┐р┤╕р╡Нр┤ер┤╛р┤ир┤др╡Нр┤др┤┐р╡╜ р┤Тр┤░р╡Б р┤Йр┤кр┤Хр┤╛р┤░р┤кр╡Нр┤░р┤жр┤ор┤╛р┤п р┤Яр┤┐р┤кр╡Нр┤кр╡Н.",
    mr: "ЁЯМ▒ рддреБрдордЪреНрдпрд╛ рдкреНрд░рд╢реНрдирд╛рд╡рд░ рдЖрдзрд╛рд░рд┐рдд рд╣рд╛ рдЙрдкрдпреБрдХреНрдд рд╕рд▓реНрд▓рд╛ рдЖрд╣реЗ.",
    ta: "ЁЯМ▒ роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ роЕроЯро┐рокрпНрокроЯрпИропро╛роХроХрпН роХрпКрогрпНроЯ роТро░рпБ рокропройрпБро│рпНро│ роХрпБро▒ро┐рокрпНрокрпИ роЗроЩрпНроХрпЗ роХрпКроЯрпБродрпНродрпБро│рпНро│рпЛроорпН.",
    te: "ЁЯМ▒ р░ор▒А р░кр▒Нр░░р░╢р▒Нр░и р░Жр░зр░╛р░░р░Вр░Чр░╛ р░Зр░жр░┐ р░Тр░Х р░Йр░кр░пр▒Лр░Чр░Хр░░р░ор▒Ир░и р░Ър░┐р░Яр▒Нр░Хр░╛.",
    bn: "ЁЯМ▒ ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи ржЕржирзБржпрж╛ржпрж╝рзА ржПржЯрж┐ ржПржХржЯрж┐ рж╕рж╣рж╛ржпрж╝ржХ ржкрж░рж╛ржорж░рзНрж╢ред",
  },
  aiReplyWithImage: {
    en: "ЁЯЦ╝я╕П I analyzed the image. The leaves show mild stress; consider balanced NPK.",
    hi: "ЁЯЦ╝я╕П рдореИрдВрдиреЗ рдЫрд╡рд┐ рджреЗрдЦреАред рдкрддреНрддреЛрдВ рдореЗрдВ рд╣рд▓реНрдХрд╛ рддрдирд╛рд╡ рджрд┐рдЦ рд░рд╣рд╛ рд╣реИ; рд╕рдВрддреБрд▓рд┐рдд NPK рджреЗрдВред",
    kn: "ЁЯЦ╝я╕П р▓Ър▓┐р▓др│Нр▓░ р▓ир│Лр▓бр▓┐р▓жр│Ж. р▓Ор▓▓р│Жр▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓╕р│Нр▓╡р▓▓р│Нр▓к р▓Тр▓др│Нр▓др▓б р▓Хр▓Вр▓бр│Бр▓мр▓░р│Бр▓др│Нр▓др▓жр│Ж; р▓╕р▓ор▓др│Лр▓▓р▓┐р▓д NPK р▓ир│Ар▓бр▓┐.",
    ml: "ЁЯЦ╝я╕П р┤Юр┤╛р╡╗ р┤Ър┤┐р┤др╡Нр┤░р┤В р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤┐р┤Ър╡Нр┤Ър╡Б. р┤Зр┤▓р┤Хр╡╛р┤Хр╡Нр┤Хр╡Н р┤Ър╡Жр┤▒р┤┐р┤п р┤╕р┤ор╡Нр┤ор╡╝р┤жр╡Нр┤жр┤В; р┤мр┤╛р┤▓р╡╗р┤╕р╡Нр┤бр╡Н NPK р┤ир╡╜р┤Хр╡Бр┤Х.",
    mr: "ЁЯЦ╝я╕П рдореА рдкреНрд░рддрд┐рдорд╛ рдкрд╛рд╣рд┐рд▓реА. рдкрд╛рдирд╛рдВрдордзреНрдпреЗ рд╕реМрдореНрдп рддрд╛рдг рджрд┐рд╕рддреЛ; рд╕рдорддреЛрд▓ NPK рджреНрдпрд╛.",
    ta: "ЁЯЦ╝я╕П рокроЯродрпНродрпИ рокро░ро┐роЪрпЛродро┐родрпНродрпЗройрпН. роЗро▓рпИроХро│ро┐ро▓рпН роЪро┐ро▒рпБ роЕро┤рпБродрпНродроорпН родрпЖро░ро┐роХро┐ро▒родрпБ; роЪроороиро┐ро▓рпИ NPK роХрпКроЯрпБроЩрпНроХро│рпН.",
    te: "ЁЯЦ╝я╕П р░Ър░┐р░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░Ър▒Вр░╢р░╛р░ир▒Б. р░Жр░Хр▒БтАМр░▓р▒Нр░▓р▒Л р░╕р▒Нр░╡р░▓р▒Нр░к р░Тр░др▒Нр░др░┐р░бр░┐ р░Йр░Вр░жр░┐; р░╕р░ор░др▒Бр░▓р▒Нр░п NPK р░Зр░╡р▒Нр░╡р░Вр░бр░┐.",
    bn: "ЁЯЦ╝я╕П ржЫржмрж┐ ржжрзЗржЦрзЗржЫрж┐ред ржкрж╛рждрж╛ржпрж╝ рж╣рж╛рж▓ржХрж╛ рж╕рзНржЯрзНрж░рзЗрж╕ ржжрзЗржЦрж╛ ржпрж╛ржЪрзНржЫрзЗ; рж╕рзБрж╖ржо NPK ржжрж┐ржиред",
  },
  // Demo: seeded tomato Q and AI suggestion (fully localized)
  userTomatoQ: {
    en: "What is this tomato leaf problem?",
    hi: "рдпрд╣ рдЯрдорд╛рдЯрд░ рдХреЗ рдкрддреНрддреЗ рдХреА рд╕рдорд╕реНрдпрд╛ рдХреНрдпрд╛ рд╣реИ?",
    kn: "р▓Зр▓жр│Б р▓Яр│Кр▓ор│Нр▓пр▓╛р▓Яр│К р▓Ор▓▓р│Жр▓п р▓╕р▓ор▓╕р│Нр▓пр│Жр▓пр│Зр▓ир│Б?",
    ml: "р┤Зр┤др╡Н р┤др┤Хр╡Нр┤Хр┤╛р┤│р┤┐ р┤Зр┤▓р┤пр╡Бр┤Яр╡Ж р┤кр╡Нр┤░р┤╢р╡Нр┤ир┤В р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н?",
    mr: "рд╣рд╛ рдЯреЛрдореЕрдЯреЛ рдкрд╛рдирд╛рдВрдЪрд╛ рдЖрдЬрд╛рд░ рдХреЛрдгрддрд╛?",
    ta: "роЗродрпБ родроХрпНроХро╛ро│ро┐ роЗро▓рпИрокрпН рокро┐ро░роЪрпНроЪройрпИ роОройрпНрой?",
    te: "р░Зр░жр░┐ р░Яр░ор▒Лр░Яр░╛ р░Жр░Хр▒Б р░╕р░ор░╕р▒Нр░п р░Пр░Вр░Яр░┐?",
    bn: "ржПржЯрж┐ ржЯржорзЗржЯрзЛ ржкрж╛рждрж╛рж░ рж╕ржорж╕рзНржпрж╛ ржХрзА?",
  },
  aiTomatoGeneric: {
    en: "Looks like a common leaf spot. Remove affected leaves, keep foliage dry, and apply a copper-based protectant. Monitor new growth.",
    hi: "рдпрд╣ рд╕рд╛рдорд╛рдиреНрдп рдкрддреНрддреА рдзрдмреНрдмрд╛ рд▓рдЧрддрд╛ рд╣реИред рдкреНрд░рднрд╛рд╡рд┐рдд рдкрддреНрддреЗ рд╣рдЯрд╛рдПрдБ, рдкрддреНрддрд┐рдпреЛрдВ рдХреЛ рд╕реВрдЦрд╛ рд░рдЦреЗрдВ рдФрд░ рдХреЙрдкрд░-рдЖрдзрд╛рд░рд┐рдд рдкреНрд░реЛрдЯреЗрдХреНрдЯреЗрдВрдЯ рд▓рдЧрд╛рдПрдБред рдирдИ рдмрдврд╝рдд рдкрд░ рдирд┐рдЧрд░рд╛рдиреА рд░рдЦреЗрдВред",
    kn: "р▓Зр▓жр│Б р▓╕р▓╛р▓ор▓╛р▓ир│Нр▓п р▓Ор▓▓р│Ж р▓Хр▓▓р│Ж р▓Ор▓Вр▓жр│Б р▓Хр▓╛р▓гр│Бр▓др│Нр▓др▓жр│Ж. р▓╕р│Лр▓Вр▓Хр▓┐р▓д р▓Ор▓▓р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓др│Жр▓Чр│Жр▓жр│Бр▓╣р▓╛р▓Хр▓┐, р▓Ор▓▓р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓Тр▓гр▓╡р▓╛р▓Чр▓┐р▓бр▓┐, р▓Хр▓╛р▓кр▓░р│Н р▓Жр▓зр▓╛р▓░р▓┐р▓д р▓░р▓Хр│Нр▓╖р▓Хр▓╡р▓ир│Нр▓ир│Б р▓мр▓│р▓╕р▓┐. р▓╣р│Кр▓╕ р▓мр│Жр▓│р▓╡р▓гр▓┐р▓Чр│Жр▓пр▓ир│Нр▓ир│Б р▓Чр▓ор▓ир▓┐р▓╕р▓┐.",
    ml: "р┤Зр┤др╡Н р┤╕р┤╛р┤зр┤╛р┤░р┤г р┤Зр┤▓р╡Нр┤кыЮлр╡Н р┤кр╡Лр┤▓р╡Ж р┤др╡Лр┤ир╡Нр┤ир╡Бр┤ир╡Нр┤ир╡Б. р┤мр┤╛р┤зр┤┐р┤д р┤Зр┤▓р┤Хр╡╛ р┤ир╡Ар┤Хр╡Нр┤Хр┤Вр┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х, р┤Зр┤▓р┤Хр╡╛ р┤╡р┤░р┤гр╡Нр┤Яр┤др┤╛р┤пр┤┐ р┤╕р╡Вр┤Хр╡Нр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х, р┤Хр┤╛р┤кр╡Нр┤кр╡╝ р┤Ер┤зр┤┐р┤╖р╡НтАМр┤ар┤┐р┤д р┤╕р┤Вр┤░р┤Хр╡Нр┤╖р┤Хр┤В р┤кр╡Нр┤░р┤пр╡Лр┤Чр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х. р┤кр╡Бр┤др┤┐р┤п р┤╡р┤│р╡╝р┤Ър╡Нр┤Ъ р┤ир┤┐р┤░р╡Ар┤Хр╡Нр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х.",
    mr: "рд╣реЗ рд╕рд╛рдорд╛рдиреНрдп рдкрд╛рдирд╛рдВрд╡рд░реАрд▓ рдбрд╛рдЧ рд╡рд╛рдЯрддрд╛рдд. рдмрд╛рдзрд┐рдд рдкрд╛рдиреЗ рдХрд╛рдвреВрди рдЯрд╛рдХрд╛, рдкрд░реНрдгрд╕рдВрднрд╛рд░ рдХреЛрд░рдбреЗ рдареЗрд╡рд╛ рдЖрдгрд┐ рдХреЙрдкрд░-рдЖрдзрд╛рд░рд┐рдд рд╕рдВрд░рдХреНрд╖рдХ рдлрд╡рд╛рд░рдгреА рдХрд░рд╛. рдирд╡реАрди рд╡рд╛рдвреАрд╡рд░ рд▓рдХреНрд╖ рдареЗрд╡рд╛.",
    ta: "роЗродрпБ рокрпКродрпБро╡ро╛рой роЗро▓рпИроХрпН роХро▒рпИ рокрпЛро▓рпН родрпЖро░ро┐роХро┐ро▒родрпБ. рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ роЗро▓рпИроХро│рпИ роЕроХро▒рпНро▒ро╡рпБроорпН, роЗро▓рпИроХро│рпИ роЙро▓ро░ ро╡рпИродрпНродрпБроХрпН роХрпКро│рпНро│ро╡рпБроорпН, родро╛рооро┐ро░ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой рокро╛родрпБроХро╛рокрпНрокрпБ рооро░рпБроирпНродрпИ рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН. рокрпБродро┐роп ро╡ро│ро░рпНроЪрпНроЪро┐ропрпИ роХро╡ройро┐роХрпНроХро╡рпБроорпН.",
    te: "р░Зр░жр░┐ р░╕р░╛р░зр░╛р░░р░г р░Жр░Хр▒Б р░ор░Ър▒Нр░Ър░▓р░╛ р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐. р░кр▒Нр░░р░нр░╛р░╡р░┐р░д р░Жр░Хр▒Бр░▓р░ир▒Б р░др▒Ар░╕р▒Зр░пр░Вр░бр░┐, р░Жр░Хр▒Бр░▓р▒Б р░Ор░Вр░бр░Чр░╛ р░Йр░Вр░бр▒Зр░▓р░╛ р░Ър▒Вр░╕р▒Бр░Хр▒Лр░Вр░бр░┐, р░Хр░╛р░кр░░р▒Н-р░Жр░зр░╛р░░р░┐р░д р░░р░Хр▒Нр░╖р░Хр░╛р░ир▒Нр░ир░┐ р░╡р░╛р░бр░Вр░бр░┐. р░Хр▒Кр░др▒Нр░д р░кр▒Жр░░р▒Бр░Чр▒Бр░жр░▓р░ир▒Б р░Чр░ор░ир░┐р░Вр░Ър░Вр░бр░┐.",
    bn: "ржПржЯрж┐ рж╕рж╛ржзрж╛рж░ржг ржкрж╛рждрж╛ржпрж╝ ржжрж╛ржЧрзЗрж░ ржорждрзЛ ржжрзЗржЦрж╛ржЪрзНржЫрзЗред ржЖржХрзНрж░рж╛ржирзНржд ржкрж╛рждрж╛ рждрзБрж▓рзЗ ржлрзЗрж▓рзБржи, ржкрж╛рждрж╛ржЧрзБрж▓рзЛ рж╢рзБржХржирзЛ рж░рж╛ржЦрзБржи ржПржмржВ ржХржкрж╛рж░-ржнрж┐рждрзНрждрж┐ржХ ржкрзНрж░ржЯрзЗржХржЯрзНржпрж╛ржирзНржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред ржирждрзБржи ржкрж╛рждрж╛рж░ ржмрзГржжрзНржзрж┐рж░ ржжрж┐ржХрзЗ ржиржЬрж░ рж░рж╛ржЦрзБржиред",
  },
};

function tr(key, lang) {
  const entry = T[key];
  if (!entry) return key;
  return entry[lang] || entry.en;
}

// Fallback "translation" for arbitrary user text (demo-only)
function translateFreeText(text, lang) {
  if (!text) return "";
  // For demo, simply prefix to simulate translation for unknown phrases.
  return `[${lang.toUpperCase()}] ${text}`;
}

// Use a local tomato image if you add /public/tomato.jpg; otherwise fallback to a Wikimedia image
// Attribution: Wikimedia Commons (Tomato leaves) тАФ image is used via hotlink for demo only.
const TOMATO_IMG = "/tomato.png";
const TOMATO_FALLBACK =
  "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Tomato_leaf_with_Septoria_leaf_spot.jpg/320px-Tomato_leaf_with_Septoria_leaf_spot.jpg";

// (Removed) disease suggestion dataset to simplify demo UI

export default function Home() {
  const [language, setLanguage] = useState("en");
  const [input, setInput] = useState("");
  const [image, setImage] = useState(null);
  const [recording, setRecording] = useState(false);
  const recognitionRef = useRef(null);
  const listRef = useRef(null);

  // Messages store canonical content; we translate at render time
  const makeInitialMessages = () => [
    {
      id: 1,
      sender: "ai",
      // Keep canonical base in English so dictionary detection works
      textBase: tr("greeting", "en"),
      type: "text",
      createdAt: Date.now(),
    },
  ];

  const [messages, setMessages] = useState(() => {
    const base = makeInitialMessages();
    // Seed one tomato example
    const seeded = [
      ...base,
      {
        id: 2,
        sender: "farmer",
        textKey: "userTomatoQ",
        textBase: T.userTomatoQ.en,
        imageUrl: TOMATO_IMG,
        type: "image-text",
        createdAt: Date.now() - 1000 * 60 * 5,
      },
      {
        id: 3,
        sender: "ai",
        textKey: "aiTomatoGeneric",
        textBase: T.aiTomatoGeneric.en,
        type: "text",
        createdAt: Date.now() - 1000 * 60 * 5 + 2000,
      },
    ];
    return seeded;
  });

  useEffect(() => {
    // Auto-scroll to bottom when messages update
    listRef.current?.scrollTo({
      top: listRef.current.scrollHeight,
      behavior: "smooth",
    });
  }, [messages]);

  const startVoice = () => {
    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) return alert("Voice not supported in this browser");
    const recog = new SpeechRecognition();
    const langMeta = LANGS.find((l) => l.code === language);
    recog.lang = langMeta?.sr || "en-IN";
    recog.onresult = (e) => {
      const transcript = e.results?.[0]?.[0]?.transcript || "";
      setInput((prev) => (prev ? prev + " " : "") + transcript);
    };
    recog.onend = () => setRecording(false);
    recog.start();
    recognitionRef.current = recog;
    setRecording(true);
  };

  const stopVoice = () => {
    recognitionRef.current?.stop();
    setRecording(false);
  };

  const onPickImage = (e) => {
    const f = e.target.files?.[0];
    if (!f) return;
    setImage(f);
  };

  // (Removed) addDiseaseDemo as the suggestion section is removed

  const handleSend = (e) => {
    e.preventDefault();
    if (!input.trim() && !image) return;

    const now = Date.now();
    const newUserMsg = {
      id: now,
      sender: "farmer",
      textBase: input.trim(),
      type: image ? "image-text" : "text",
      file: image || undefined,
      createdAt: now,
    };
    setMessages((prev) => [...prev, newUserMsg]);

    // Demo AI reply after 1s
    setTimeout(() => {
      const useKey = image ? "aiReplyWithImage" : "aiReplyGeneric";
      const aiMsg = {
        id: now + 1,
        sender: "ai",
        textKey: useKey,
        textBase: T[useKey].en,
        type: "text",
        createdAt: now + 1000,
      };
      setMessages((prev) => [...prev, aiMsg]);
    }, 1000);

    setInput("");
    setImage(null);
  };

  const renderText = (textBase, textKey) => {
    // Use dictionary when possible; otherwise simulate translation
    if (textKey && T[textKey]) return tr(textKey, language);
    const dictKeys = [
      "greeting",
      "aiReplyGeneric",
      "aiReplyWithImage",
      "userTomatoQ",
      "aiTomatoGeneric",
    ];
    const matchingKey = dictKeys.find((k) => T[k].en === textBase);
    if (matchingKey) return tr(matchingKey, language);
    return translateFreeText(textBase, language);
  };

  const clearChat = () => {
    const ok = window.confirm("Clear all chat messages?");
    if (!ok) return;
    setMessages(makeInitialMessages());
  };

  return (
    <div className="h-[calc(100vh-64px)] flex flex-col bg-gray-900">
      {/* Header */}
      <div className="p-4 bg-gray-800 flex flex-wrap gap-3 justify-between items-center border-b border-gray-700">
        <h1 className="text-green-400 font-bold">AI Kisan Mitra</h1>
        <div className="flex items-center gap-2">
          <label className="text-sm text-gray-400">Language</label>
          <select
            value={language}
            onChange={(e) => setLanguage(e.target.value)}
            className="bg-gray-900 border border-gray-700 text-gray-200 rounded-lg px-2 py-1 text-sm"
          >
            {LANGS.map((l) => (
              <option key={l.code} value={l.code}>
                {l.label}
              </option>
            ))}
          </select>
          <button
            type="button"
            onClick={clearChat}
            className="ml-2 px-3 py-1.5 text-sm rounded-md border border-red-500 text-red-400 hover:bg-red-500/10"
            title="Clear all messages"
          >
            ЁЯз╣ {tr("clear", language)}
          </button>
        </div>
      </div>

      {/* Messages */}
      <div ref={listRef} className="flex-1 p-4 overflow-y-auto space-y-3">
        {messages.map((msg) => (
          <Motion.div
            key={msg.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className={`max-w-[80%] p-3 rounded-xl border ${
              msg.sender === "farmer"
                ? "ml-auto bg-green-600 text-gray-900 border-green-400"
                : "mr-auto bg-gray-800 text-gray-200 overflow-hidden border-gray-700"
            }`}
          >
            {msg.type !== "text" &&
              (msg.file || msg.imageUrl || msg.imageDemo) && (
                <img
                  src={
                    msg.file
                      ? URL.createObjectURL(msg.file)
                      : msg.imageUrl ||
                        msg.imageDemo ||
                        TOMATO_FALLBACK || TOMATO_IMG
                  }
                  alt="uploaded"
                  className="w-16 h-16 object-cover overflow-hidden rounded-xl mb-2 border border-gray-700"
                />
              )}
            <div>{renderText(msg.textBase, msg.textKey)}</div>
            <div className="text-xs opacity-70 mt-1">
              {new Date(msg.createdAt).toLocaleTimeString()}
            </div>
          </Motion.div>
        ))}
      </div>

      {/* (Removed) disease suggestion gallery */}

      {/* Input */}
      <form
        onSubmit={handleSend}
        className="p-4 bg-gray-800 flex flex-wrap gap-2 items-center border-t border-gray-700"
      >
        <label className="px-3 py-2 bg-gray-700 text-gray-200 rounded cursor-pointer hover:bg-gray-600">
          <input
            type="file"
            accept="image/*"
            className="hidden"
            onChange={onPickImage}
          />
          ЁЯУ╕ {tr("upload", language)}
        </label>
        {image && (
          <div className="flex items-center gap-2 text-xs text-gray-400">
            <span>{image.name}</span>
            <button
              type="button"
              className="text-red-400"
              onClick={() => setImage(null)}
            >
              тЬХ
            </button>
          </div>
        )}

        <button
          type="button"
          onClick={recording ? stopVoice : startVoice}
          className={`px-3 py-2 rounded-md shadow ${
            recording
              ? "bg-red-500 text-white hover:bg-red-600"
              : "bg-yellow-400 text-gray-900 hover:bg-yellow-500"
          }`}
        >
          {recording
            ? `тП╣ ${tr("stop", language)}`
            : `ЁЯОЩ ${tr("start", language)}`}
        </button>

        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder={tr("placeholder", language)}
          className="flex-1 min-w-[200px] bg-gray-900 border border-gray-700 text-gray-200 rounded-lg px-3 py-2 focus:ring-2 focus:ring-green-500"
        />

        <Motion.button
          whileHover={{ scale: 1.05 }}
          type="submit"
          className="px-4 py-2 bg-gradient-to-r from-green-500 to-green-400 text-gray-900 rounded-lg"
        >
          {tr("send", language)}
        </Motion.button>
      </form>

      {/* Expert Help Shortcut */}
      <div className="p-3 text-center">
        <Link
          to="/expert"
          className="text-yellow-400 underline hover:text-yellow-300"
        >
          {tr("needExpert", language)}
        </Link>
      </div>
    </div>
  );
}
